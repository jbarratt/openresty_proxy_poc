events {
    worker_connections 4096;
}

worker_processes 1;

http {
    server {
        access_log /var/log/nginx/access.log;
        error_log /var/log/nginx/error.log;
        listen *:80;

        ssl_certificate /etc/nginx/ssl/server.crt;
        ssl_certificate_key /etc/nginx/ssl/server.key;
        listen *:443 ssl;

        location / {
            resolver 8.8.8.8;
            set_by_lua $proxy_domain '
                if ngx.var.arg_preview then
                    return ngx.var.arg_preview
                elseif ngx.var.cookie_proxy_domain then
                    return ngx.var.cookie_proxy_domain
                else
                    return ""
                end
            ';
            access_by_lua '
                if ngx.var.proxy_domain == "" then
                    ngx.status = 404
                    ngx.say("No Domain. Try connecting to http://" .. ngx.var.host .. "/?preview=targetdomain.com")
                    ngx.exit(ngx.OK)
                end
            ';
            header_filter_by_lua '
                function get_cookies()
                  local cookies = ngx.header["Set-Cookie"] or {}
                 
                  if type(cookies) == "string" then
                    cookies = {cookies}
                  end
                 
                  return cookies
                end
                 
                 
                function add_cookie(cookie)
                  local cookies = get_cookies()
                  table.insert(cookies, cookie)
                  ngx.header["Set-Cookie"] = cookies
                end

                -- if someone redirects us to, say, www.domain.com, intercept that
                -- and update the proxy_domain cookie for the next request
                if ngx.header["Location"] then
                    local newhost = string.match(ngx.header["Location"], "https?:\/\/([^\/]+)")
                    if newhost then
                        ngx.header["Location"] = string.gsub(ngx.header["Location"], newhost, ngx.var.host, 1)
                        ngx.var.proxy_domain = newhost
                    end
                end

                add_cookie("proxy_domain=" .. ngx.var.proxy_domain .. "; Path=/")
            ';

            body_filter_by_lua '
                local chunk, eof = ngx.arg[1], ngx.arg[2]
                local buffered = ngx.ctx.buffered
                if not buffered then
                    buffered = {}
                    ngx.ctx.buffered = buffered
                end
                if chunk ~= "" then
                    buffered[#buffered +1] = chunk
                    ngx.arg[1] = nil
                end
                if eof then
                    local whole = table.concat(buffered)
                    ngx.ctx.buffered = nil
                    whole = string.gsub(whole, "//" .. ngx.var.proxy_domain, "//" .. ngx.var.host)
                    ngx.arg[1] = whole
                end
            ';

            # Tell backend not to use compression, so we can filter the body
            proxy_set_header Accept-Encoding "";
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $proxy_domain;
            proxy_pass $scheme://$proxy_domain;
            # This is not working for some reason.
            # subs_filter_types text/html text/css text/xml;
            # subs_filter //$proxy_domain //$host gi;
        }
    }
}
